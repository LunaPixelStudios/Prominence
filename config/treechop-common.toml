[mod]
	#Let TreeChop print to the log
	printDebugInfo = true
	#Set to false to disable TreeChop without having to uninstall the mod
	enabled = true
[permissions]
	[permissions.sneakBehavior]
		canBeNone = true
		canBeInvertChopping = true
		canBeInvertFelling = true
	[permissions.chopInCreativeMode]
		canBeFalse = true
		canBeTrue = true
	[permissions.choppingEnabled]
		canBeFalse = true
		canBeTrue = true
	[permissions.fellingEnabled]
		canBeFalse = true
		canBeTrue = true
	[permissions.treeMustHaveLeaves]
		canBeFalse = true
		canBeTrue = true
[general]
	#If false, log items will be destroyed when chopping
	dropLootForChoppedBlocks = true
[treeDetection]
	#Destroy leaves when a tree is felled
	breakLeaves = true
	#Non-decayable leaves are ignored when detecting leaves
	ignorePersistentLeaves = true
	#Maximum number of leaves blocks that can destroyed when a tree is felled
	#Range: 1 ~ 8096
	maxLeavesBlocks = 1024
	#Maximum distance from log blocks to destroy leaves blocks when felling
	#Range: 0 ~ 16
	maxBreakLeavesDistance = 7
	#Maximum number of log blocks that can be detected to belong to one tree
	#Range: 1 ~ 8096
	maxTreeBlocks = 320

	[treeDetection.leaves]
		#Blocks that should be considered leaves
		#Specify using registry names (mod:block), tags (#mod:tag), and namespaces (@mod)
		blocks = ["#treechop:leaves_like", "#minecraft:leaves", "pamhc2trees:pam[a-z]+"]
		#Blocks that should never be considered leaves, even if included in the list above
		#Specify using registry names (mod:block), tags (#mod:tag), and namespaces (@mod)
		exceptions = []
	[treeDetection.logs]
		#Blocks that should be considered choppable
		#For block lists, specify using registry names (mod:block), tags (#mod:tag), namespaces (@mod), and Java-style regular expressions
		#Regular expressions must match the whole resource name, including the colon. Some simple examples are:
		# - To match any block ending in _log: ".*_log", where .* is a wildcard
		# - You can also specify a mod: "treemod:.*_log"
		# - To also match stripped versions: ".*_log(_stripped)?", where ? means that the text in the parenthesis is optional
		#For more help, see https://github.com/hammertater/treechop/wiki/Configuration
		blocks = ["#treechop:choppables", "#minecraft:logs"]
		#Blocks that should never be chopped, even if included in the list above
		#Specify using registry names (mod:block), tags (#mod:tag), and namespaces (@mod)
		exceptions = ["minecraft:bamboo", "#dynamictrees:branches", "dynamictrees:trunk_shell"]
[chopCounting]
	#Felling a tree can require more chops than the number of blocks in the tree
	canRequireMoreChopsThanBlocks = false
	#How to round the number of chops needed to fell a tree; this is more meaningful for smaller trees
	#Allowed Values: DOWN, NEAREST, UP
	rounding = "NEAREST"
	#Method to use for computing the number of chops needed to fell a tree
	#Allowed Values: LINEAR, LOGARITHMIC
	algorithm = "LOGARITHMIC"

	#See https://github.com/hammertater/treechop/#linear
	[chopCounting.linear]
		#The base number of chops required to fell a tree regardless of its size
		#Range: -10000.0 ~ 10000.0
		baseNumChops = 0.0
		#The number of chops per block required to fell a tree; if chopsPerBlock = 0.5, it will take 50 chops to fell a 100 block tree
		#Range: 0.0 ~ 7.0
		chopsPerBlock = 1.0
	#See https://github.com/hammertater/treechop/#logarithmic
	[chopCounting.logarithmic]
		#Determines the number of chops required to fell a tree; higher values require more chops for bigger trees
		#Range: 0.0 ~ 10000.0
		a = 10.0
[compatibility]
	[compatibility.general]
		#Prevent chopping when right-clicking blocks
		preventChoppingOnRightClick = false
		#Only chop when using a tool that increases block breaking speed (such as axes for logs)
		choppingRequiresFastBreakingTool = false
		#Only chop when using the correct tool for drops, if any (does nothing in vanilla, but some mods add tool requirements to logs
		choppingRequiresCorrectToolForDrops = true
		#Prevent infinite loops when chopping; fixes crashes when using modded items that break multiple blocks
		preventChopRecursion = true

		#The chop settings used by non-player entities, such as robots and machine blocks
		[compatibility.general.fakePlayerChopSettings]
			treesMustHaveLeaves = true
			#Use with caution! May cause conflicts with some mods, e.g. https://github.com/hammertater/treechop/issues/71
			choppingEnabled = false
			#Felling only matters if chopping is enabled; probably best to leave this on
			fellingEnabled = true
		[compatibility.general.blacklist]
			#Whether the listed items should be blacklisted or whitelisted
			#Allowed Values: BLACKLIST, WHITELIST
			blacklistOrWhitelist = "BLACKLIST"
			#List of item registry names (mod:item), tags (#mod:tag), and namespaces (@mod) for items that should not chop when used to break a log
			#- Items in this list that have special support for TreeChop will not be blacklisted; see https://github.com/hammertater/treechop/blob/main/docs/compatibility.md#blacklist
			items = ["botania:terra_axe", "mekanism:atomic_disassembler", "@lumberjack", "practicaltools:iron_greataxe", "practicaltools:golden_greataxe", "practicaltools:diamond_greataxe", "practicaltools:netherite_greataxe"]
	[compatibility.API]
		#Log information about TreeChop API usage. May be useful for debugging mod compatibility issues.
		verbose = false
	#A set of alternate tree detection strategies for oddly shaped trees
	#For block lists, specify using registry names (mod:block), tags (#mod:tag), namespaces (@mod), and Java-style regular expressions
	#Regular expressions must match the whole resource name, including the colon. Some simple examples are:
	# - To match any block ending in _log: ".*_log", where .* is a wildcard
	# - You can also specify a mod: "treemod:.*_log"
	# - To also match stripped versions: ".*_log(_stripped)?", where ? means that the text in the parenthesis is optional
	#For more help, see https://github.com/hammertater/treechop/wiki/Configuration
	[compatibility.trees]
		[compatibility.trees.hugeFungi]
			leaves = ["#minecraft:wart_blocks", "minecraft:shroomlight"]
			logs = ["#minecraft:crimson_stems", "#minecraft:warped_stems"]
		[compatibility.trees.hugeMushrooms]
			leaves = ["#c:mushroom_caps"]
			logs = ["#c:mushroom_stems"]
		[compatibility.trees.problematicLeavesTrees]
			leaves = ["tropicraft:.*_leaves(_.*)?", "betternether:.*_leaves"]
			logs = ["tropicraft:.*_log(_.*)?", "mysticbiomes:.*_log", "betternether:.*_bark", "betternether:.*_log"]
